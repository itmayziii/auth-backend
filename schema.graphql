# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Client {
  """

  The data type uuid stores Universally Unique Identifiers (UUID) as defined by RFC 4122, ISO/IEC 9834-8:2005,
  and related standards. (Some systems refer to this data type as a globally unique identifier, or GUID, instead.)
  This identifier is a 128-bit quantity that is generated by an algorithm chosen to make it very unlikely that the
  same identifier will be generated by anyone else in the known universe using the same algorithm.
  Therefore, for distributed systems, these identifiers provide a better uniqueness guarantee than sequence generators,
  which are only unique within a single database.
  """
  ID: ID!
  "When the client was created at, this value should never change."
  createdAt: DateTime!
  "Additional information about the client that may help others understand its use."
  description: String
  "How many times has the client authenticated with this authorization server."
  loginCount: Int!
  "Client name which should be a human readable way to quickly identify a client."
  name: String!
  """

  Absolute URIs as defined by https://tools.ietf.org/html/rfc3986#section-4.3.

  These URIs are the accepted list of URIs that the authorization server is allowed to redirect the
  resource owner's user-agent to. This behaviour is described in the oauth2 spec
  https://tools.ietf.org/html/rfc6749#section-3.1.2.
  """
  redirectURIs: [String!]!
  """

  https://tools.ietf.org/html/rfc6749#section-2.1

  We do not support hybrid clients that could act as both a public and confidential client.
  Instead you should register 2 separate clients.
  """
  type: ClientType!
  "When the client was last updated. This value will change every time an update occurs on the client record."
  updatedAt: DateTime!
}

type Mutation {
  "Register a client per the oauth2 spec - https://tools.ietf.org/html/rfc6749#section-2."
  registerClient(input: RegisterClientInput!): RegisterClientPayload!
}

type Query {
  noop: Boolean
}

"Response for the 'RegisterClient' mutation."
type RegisterClientPayload {
  "The client that was registered."
  client: Client!
}

"Tenant represents a set of users. i.e. A tenant is commonly a company name like Sherwin-Williams"
type Tenant {
  """

  The data type uuid stores Universally Unique Identifiers (UUID) as defined by RFC 4122, ISO/IEC 9834-8:2005,
  and related standards. (Some systems refer to this data type as a globally unique identifier, or GUID, instead.)
  This identifier is a 128-bit quantity that is generated by an algorithm chosen to make it very unlikely that the
  same identifier will be generated by anyone else in the known universe using the same algorithm.
  Therefore, for distributed systems, these identifiers provide a better uniqueness guarantee than sequence generators,
  which are only unique within a single database.
  """
  ID: ID!
  "When the tenant was created at, this value should never change."
  createdAt: DateTime!
  "Name of the tenant which should be unique among other tenants."
  name: String!
  "When the tenant was last updated. This value will change every time an update occurs on the tenant record."
  updatedAt: DateTime!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

"""

https://tools.ietf.org/html/rfc6749#section-2.1

We do not support hybrid clients that could act as both a public and confidential client.
Instead you should register 2 separate clients.
"""
enum ClientType {
  """

  Clients capable of maintaining the confidentiality of their
  credentials (e.g., client implemented on a secure server with
  restricted access to the client credentials), or capable of secure
  client authentication using other means.
  """
  CONFIDENTIAL
  """

  Clients incapable of maintaining the confidentiality of their
  credentials (e.g., clients executing on the device used by the
  resource owner, such as an installed native application or a web
  browser-based application), and incapable of secure client
  authentication via any other means.
  """
  PUBLIC
}

"https://tools.ietf.org/html/rfc6749#section-2"
input RegisterClientInput {
  "Additional information about the client that may help others understand its use."
  description: String
  "Client name which should be a human readable way to quickly identify a client."
  name: String!
  """

  Absolute URIs as defined by https://tools.ietf.org/html/rfc3986#section-4.3.

  These URIs are the accepted list of URIs that the authorization server is allowed to redirect the
  resource owner's user-agent to. This behaviour is described in the oauth2 spec
  https://tools.ietf.org/html/rfc6749#section-3.1.2.
  """
  redirectURIs: [String!]!
  """

  https://tools.ietf.org/html/rfc6749#section-2.1

  We do not support hybrid clients that could act as both a public and confidential client.
  Instead you should register 2 separate clients.
  """
  type: ClientType!
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Time

"The `Upload` scalar type represents a file upload."
scalar Upload
